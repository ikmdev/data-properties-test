name: SemVer Release Workflow

run-name: "Releasing ${{ github.event.repository.name }} #${{github.run_number}} -- ${{inputs.modules}}"

# Trigger workflow manually
on:
  workflow_dispatch:
    inputs:
      modules:
       type: choice
       description: Module
       required: true
       options:
        - --SELECT--
        - data-properties
        - tinkar-starter-data-properties
        - tinkar-example-data-properties
      release_version:
        type: string
        description: "(Optional) Custom Release Version"
        required: false
      version_type:
        description: 'Development version type to increment'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch

env:
  BRANCH_NAME: ${{ github.ref_name }}
  TRUNK_BRANCH_NAME: ${{ github.event.repository.default_branch }}
  MODULE: ${{inputs.modules == 'data-properties' && '.' || inputs.modules}}

jobs:
  release:
    name: Release
    runs-on: ubuntu-24.04
    if: github.repository_owner == 'ikmdev'
    outputs:
      LATEST_TAG: ${{steps.get_latest_tag.outputs.LATEST_TAG}}
    steps:
      - name: Verify Module Selection
        if: inputs.modules == '-- SELECT --'
        run: |
          echo "ERROR: Please pick a correct module from the selection"
          exit 1
          
      - name: Verify Branch
        if: env.BRANCH_NAME != env.TRUNK_BRANCH_NAME
        run: |
          echo "ERROR: Attempting to release from branch ${{ env.BRANCH_NAME }}. Release from ${{ env.TRUNK_BRANCH_NAME }} branch only."
          exit 1

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{secrets.IKMDEVOPS_PAT_TOKEN}}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
            distribution: 'zulu'
            java-version: 23
            server-id: ossrh
            server-username: MAVEN_USERNAME
            server-password: MAVEN_CENTRAL_TOKEN
            gpg-private-key: ${{secrets.GPG_KEY}}
            gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Configure Version Type
        id: configure_version_type
        shell: bash
        run: |
         if [ $RELEASE_TYPE == 'major' ]; then 
          echo "version_type=0" >> $GITHUB_OUTPUT
         elif [ $RELEASE_TYPE == 'minor' ]; then
          echo "version_type=1" >> $GITHUB_OUTPUT
         elif [ $RELEASE_TYPE == 'patch' ]; then
          echo "version_type=2" >> $GITHUB_OUTPUT
         elif [ $RELEASE_TYPE == 'pre-release' ]; then
          echo "version_type=3" >> $GITHUB_OUTPUT
         else
          echo "ERROR: Invalid version_type '${{ inputs.version_type }}'."
          exit 1
         fi
        env:
          RELEASE_TYPE: ${{inputs.version_type}}

      - name: Setup Git User
        run: |
          git config user.name "ikmdevops"
          git config user.email "devops@ikm.dev"

      - name: GitFlow Release
        id: gitflow_release
        run: |
             mvn gitflow:release \
                --batch-mode \
                -X \
                -Dverbose=true \
                -DallowSnapshots=true \
                -DreleaseVersion=${{ inputs.release_version }} \
                -DversionDigitToIncrement=${{ steps.configure_version_type.outputs.version_type }} \
                -DdevelopmentVersion=${{ inputs.development_version }} \
                -DpostReleaseGoals="clean install \
                      --batch-mode \
                      -e \
                      -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                      -PcodeQuality,release-enforcement \
                      -PgenerateData \
                      -Dmaven.build.cache.enabled=false"
        working-directory: ${{env.MODULE}}

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Checkout Latest Tag
        uses: actions/checkout@v4
        with:
          token: ${{secrets.IKMDEVOPS_PAT_TOKEN}}
          ref: ${{steps.get_latest_tag.outputs.LATEST_TAG}}

      - name: Maven Settings File
        uses: whelk-io/maven-settings-xml-action@v22
        with:
          servers: '[{"id": "maven-releases", "username": "admin", "password": "${{secrets.EC2_NEXUS_PASSWORD}}"}]'
          profiles: '[{"id": "nexus-profile", "properties": {"altDeploymentRepository": "maven-releases::https://nexus.tinkarbuild.com/repository/maven-releases"}}]'
          active_profiles: '["nexus-profile"]'
          output_file: .m2/settings.xml

      - name: Maven Build
        run: |
          mvn clean install\
            --batch-mode \
            -U \
            -e \
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
            -Dmaven.build.cache.enabled=false \
            -PcodeQuality \
            -PgenerateData \
            -Prelease-enforcement
        working-directory: ${{env.MODULE}}

      - name: Deploy To Nexus
        run: |
          mvn deploy \
              --batch-mode \
              -U \
              -e \
              -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
              -DskipTests \
              -DskipITs \
              -s '/home/runner/work/${{github.event.repository.name}}/${{github.event.repository.name}}/.m2/settings.xml'\
              -DrepositoryId='maven-releases'
        working-directory: ${{env.MODULE}}

      - name: Publish To OSSRH (Maven Central Staging)
        run: |
         mvn deploy \
            --batch-mode \
            -e \
            -U \
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
            -DskipTests \
            -DskipITs \
            -Dmaven.main.skip \
            -Dmaven.test.skip \
            -DrepositoryId=ossrh \
            -DrepositoryIdOSSRH='true' \
            -PstageOSSRH \
            -Dmaven.build.cache.enabled=false
        env:
           MAVEN_USERNAME: ${{secrets.OSSRH_TOKEN_USER}}
           MAVEN_CENTRAL_TOKEN: ${{secrets.OSSRH_TOKEN_PASS}}
           MAVEN_GPG_PASSPHRASE: ${{secrets.GPG_PASSPHRASE}}
        working-directory: ${{env.MODULE}}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{secrets.IKMDEVOPS_PAT_TOKEN}}
          repository: ikmdev/komet_test

      - name: Update Dropdown
        run: |
            git config user.name "ikmdevops"
            git config user.email 'devops@ikm.dev'
            git pull -p
            echo "Adding $LATEST_TAG tag to the property version choice dropdown for users attempting to generate data"
            yq -i ".on.workflow_dispatch.inputs.properties_version.options = [\"$LATEST_TAG\"] + .on.workflow_dispatch.inputs.properties_version.options" .github/workflows/generate-pipeline-test.yaml
            git diff -U1 | grep -E "\-\-\-|\- $LATEST_TAG" -B2 -A1 | grep -v "^--$" > add_property_version_choice.patch
            git restore .
            git apply add_property_version_choice.patch
            git commit -am"Updated Generate Data Pipeline With $LATEST_TAG"
            git push
        env:
          LATEST_TAG:  ${{steps.get_latest_tag.outputs.LATEST_TAG}}


  # upload-dropdown:
  #   name: Upload Dropdown
  #   runs-on: ubuntu-24.04
  #   if: github.repository_owner == 'ikmdev'
  #   needs: release
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #       with:
  #         token: ${{secrets.IKMDEVOPS_PAT_TOKEN}}
  #         repository: ikmdev/komet_test

  #     - name: Update Dropdown
  #       run: |
  #           git config user.name "ikmdevops"
  #           git config user.email 'devops@ikm.dev'
  #           git pull -p
  #           echo "Adding $LATEST_TAG tag to the property version choice dropdown for users attempting to generate data"
  #           yq -i ".on.workflow_dispatch.inputs.properties_version.options = [\"$LATEST_TAG\"] + .on.workflow_dispatch.inputs.properties_version.options" .github/workflows/generate-pipeline-test.yaml
  #           git diff -U1 | grep -E "\-\-\-|\- $LATEST_TAG" -B2 -A1 | grep -v "^--$" > add_property_version_choice.patch
  #           git restore .
  #           git apply add_property_version_choice.patch
  #           git commit -am"Updated Generate Data Pipeline With $LATEST_TAG"
  #           git push
        env:
          LATEST_TAG: ${{needs.release.outputs.LATEST_TAG}}
